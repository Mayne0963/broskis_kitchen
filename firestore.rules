rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Optimized helper functions with fast short-circuit evaluation
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isSelf(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == "admin";
    }
    
    function isValidEmail() {
      return isSignedIn() && request.auth.token.email_verified == true;
    }

    // Optimized users collection with O(1) lookups
    match /users/{uid} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if isSelf(uid) || isAdmin();
    }
    
    match /orders/{orderId} {
      allow read, write: if isSignedIn();
    }
    
    // REWARDS SYSTEM COLLECTIONS
    
    // Loyalty profiles - users can read/write their own, admins can read/write all
    match /loyalty/{userId} {
      allow read: if isSelf(userId) || isAdmin();
      allow create: if isSelf(userId) && isValidEmail() && 
                   request.resource.data.keys().hasAll(['email', 'createdAt']) &&
                   request.resource.data.email == request.auth.token.email &&
                   request.resource.data.currentPoints == 0 &&
                   request.resource.data.totalEarned == 0 &&
                   request.resource.data.totalRedeemed == 0;
      allow update: if (isSelf(userId) && 
                       // Users can only update certain fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['lastActivity', 'name']) &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.currentPoints == resource.data.currentPoints &&
                       request.resource.data.totalEarned == resource.data.totalEarned &&
                       request.resource.data.totalRedeemed == resource.data.totalRedeemed) ||
                       isAdmin(); // Admins can update any field
      allow delete: if isAdmin();
    }
    
    // Points transactions - users can read their own, only system/admin can write
    match /pointsTransactions/{transactionId} {
      allow read: if isSignedIn() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if false; // Only server-side code can create transactions
      allow update, delete: if false; // Transactions are immutable
    }
    
    // User redemptions - users can read their own, only system/admin can write
    match /userRedemptions/{redemptionId} {
      allow read: if isSignedIn() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if false; // Only server-side code can create redemptions
      allow update, delete: if false; // Redemptions are immutable
    }
    
    // Spin history - users can read their own, only system/admin can write
    match /spinHistory/{spinId} {
      allow read: if isSignedIn() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if false; // Only server-side code can create spin records
      allow update, delete: if false; // Spin history is immutable
    }
    
    // Reward catalog - read-only for authenticated users, admin can write
    match /rewardCatalog/{rewardId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin() && 
                              request.resource.data.keys().hasAll([
                                'name', 'description', 'pointsCost', 'category', 
                                'isActive', 'cogs', 'createdAt'
                              ]);
      allow delete: if isAdmin();
    }
    
    // Admin-only collections for analytics and management
    match /adminLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Idempotency keys - system use only
    match /idempotencyKeys/{keyId} {
      allow read, write: if false; // Only server-side code
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}